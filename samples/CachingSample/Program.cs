using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Relay;\nusing Relay.Core;\nusing Relay.Core.Caching;\n\nnamespace Relay.Caching.Example\n{\n    // Example request with caching\n    [Cache(30)] // Cache for 30 seconds\n    public record GetUserRequest(int UserId) : IRequest<User>;\n    \n    // Example request without caching\n    public record GetOrderRequest(int OrderId) : IRequest<Order>;\n    \n    // Example responses\n    public record User(int Id, string Name, string Email);\n    public record Order(int Id, int UserId, decimal Total);\n    \n    // Example handler\n    public class DataService\n    {\n        private static int _userCallCount = 0;\n        private static int _orderCallCount = 0;\n        \n        [Handle]\n        public async ValueTask<User> GetUser(GetUserRequest request, CancellationToken cancellationToken)\n        {\n            Interlocked.Increment(ref _userCallCount);\n            await Task.Delay(100, cancellationToken); // Simulate work\n            return new User(request.UserId, $\"User {request.UserId}\", $\"user{request.UserId}@example.com\");\n        }\n        \n        [Handle]\n        public async ValueTask<Order> GetOrder(GetOrderRequest request, CancellationToken cancellationToken)\n        {\n            Interlocked.Increment(ref _orderCallCount);\n            await Task.Delay(100, cancellationToken); // Simulate work\n            return new Order(request.OrderId, 1, 99.99m);\n        }\n        \n        public static int UserCallCount => _userCallCount;\n        public static int OrderCallCount => _orderCallCount;\n    }\n    \n    class Program\n    {\n        static async Task Main(string[] args)\n        {\n            // Setup host\n            var builder = Host.CreateDefaultBuilder(args);\n            builder.ConfigureServices(services =>\n            {\n                // Add Relay with advanced caching\n                services.AddRelay();\n                services.AddRelayAdvancedCaching();\n                services.AddScoped<DataService>();\n            });\n            \n            var host = builder.Build();\n            \n            // Get relay instance\n            var relay = host.Services.GetRequiredService<IRelay>();\n            \n            Console.WriteLine(\"Testing caching behavior...\");\n            \n            // Test cached request\n            var userRequest = new GetUserRequest(1);\n            \n            var startTime = DateTime.UtcNow;\n            var user1 = await relay.SendAsync(userRequest);\n            var firstCallTime = DateTime.UtcNow - startTime;\n            \n            startTime = DateTime.UtcNow;\n            var user2 = await relay.SendAsync(userRequest);\n            var secondCallTime = DateTime.UtcNow - startTime;\n            \n            Console.WriteLine($\"First call: {firstCallTime.TotalMilliseconds}ms - User: {user1.Name}\");\n            Console.WriteLine($\"Second call: {secondCallTime.TotalMilliseconds}ms - User: {user2.Name}\");\n            Console.WriteLine($\"User handler call count: {DataService.UserCallCount}\");\n            \n            // Test non-cached request\n            var orderRequest = new GetOrderRequest(1);\n            \n            startTime = DateTime.UtcNow;\n            var order1 = await relay.SendAsync(orderRequest);\n            var order1Time = DateTime.UtcNow - startTime;\n            \n            startTime = DateTime.UtcNow;\n            var order2 = await relay.SendAsync(orderRequest);\n            var order2Time = DateTime.UtcNow - startTime;\n            \n            Console.WriteLine($\"\\nFirst order call: {order1Time.TotalMilliseconds}ms - Order: {order1.Id}\");\n            Console.WriteLine($\"Second order call: {order2Time.TotalMilliseconds}ms - Order: {order2.Id}\");\n            Console.WriteLine($\"Order handler call count: {DataService.OrderCallCount}\");\n        }\n    }\n}