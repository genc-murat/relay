using Relay.Core.Contracts.Core;
using Relay.Core.Contracts.Pipeline;
using Relay.Core.Pipeline.Interfaces;
using Relay.Core.Validation.Extensions;
using Relay.Core.Pipeline.Extensions;
using Relay.MinimalApiSample.Features.Products;
using Relay.MinimalApiSample.Features.Users;
using Relay.MinimalApiSample.Features.Examples.Validation;
using Relay.MinimalApiSample.Features.Examples.PrePostProcessors;
using Relay.MinimalApiSample.Features.Examples.ExceptionHandling;
using Relay.MinimalApiSample.Features.Examples.Caching;
using Relay.MinimalApiSample.Features.Examples.Notifications;
using Relay.MinimalApiSample.Features.Examples.Streaming;
using Relay.MinimalApiSample.Features.Examples.Transactions;
using Relay.MinimalApiSample.Features.Examples.AIOptimization;
using Relay.MinimalApiSample.Features.Examples.AdvancedValidation;
using Relay.MinimalApiSample.Infrastructure;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new() {
        Title = "Relay Minimal API Sample",
        Version = "v1",
        Description = "A minimal API sample demonstrating Relay framework features"
    });
});

// Register InMemoryDatabase as singleton
builder.Services.AddSingleton<InMemoryDatabase>();

// Register email service for validation examples
builder.Services.AddSingleton<IEmailService, ConsoleEmailService>();

// Register all handlers and core Relay services (generated by source generator)
builder.Services.AddRelay();

// Add additional Relay features
// This includes: validation, pre/post processors, and exception handlers
builder.Services
    .AddRelayValidation()
    .AddRelayPrePostProcessors()
    .AddRelayExceptionHandlers();

// Register validation-specific pipeline behaviors and processors
builder.Services.AddTransient(typeof(IPipelineBehavior<,>), typeof(ValidationMetricsBehavior<,>));
builder.Services.AddTransient<IRequestPreProcessor<RegisterUserRequest>, ValidationPreProcessor>();
builder.Services.AddTransient<IRequestPostProcessor<RegisterUserRequest, RegisterUserResponse>, ValidationPostProcessor>();

// Register advanced validation pipeline behavior
builder.Services.AddTransient(typeof(IPipelineBehavior<,>), typeof(AdvancedValidationBehavior<,>));

var app = builder.Build();

// Configure the HTTP request pipeline
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

// Get IRelay instance for handling requests
var relay = app.Services.GetRequiredService<IRelay>();

// User endpoints
var users = app.MapGroup("/api/users")
    .WithTags("Users")
    .WithOpenApi();

users.MapGet("/", async () =>
{
    var response = await relay.SendAsync(new GetAllUsersRequest());
    return Results.Ok(response);
})
.WithName("GetAllUsers")
.WithSummary("Get all users")
.Produces<GetAllUsersResponse>();

users.MapGet("/{id:guid}", async (Guid id) =>
{
    var response = await relay.SendAsync(new GetUserRequest(id));
    return response != null ? Results.Ok(response) : Results.NotFound();
})
.WithName("GetUser")
.WithSummary("Get user by ID")
.Produces<GetUserResponse>()
.Produces(StatusCodes.Status404NotFound);

users.MapPost("/", async (CreateUserRequest request) =>
{
    var response = await relay.SendAsync(request);
    return Results.Created($"/api/users/{response.Id}", response);
})
.WithName("CreateUser")
.WithSummary("Create a new user")
.Produces<CreateUserResponse>(StatusCodes.Status201Created)
.ProducesProblem(StatusCodes.Status400BadRequest);

// Product endpoints
var products = app.MapGroup("/api/products")
    .WithTags("Products")
    .WithOpenApi();

products.MapGet("/", async () =>
{
    var response = await relay.SendAsync(new GetAllProductsRequest());
    return Results.Ok(response);
})
.WithName("GetAllProducts")
.WithSummary("Get all products")
.Produces<GetAllProductsResponse>();

products.MapGet("/{id:guid}", async (Guid id) =>
{
    var response = await relay.SendAsync(new GetProductRequest(id));
    return response != null ? Results.Ok(response) : Results.NotFound();
})
.WithName("GetProduct")
.WithSummary("Get product by ID")
.Produces<GetProductResponse>()
.Produces(StatusCodes.Status404NotFound);

products.MapPost("/", async (CreateProductRequest request) =>
{
    var response = await relay.SendAsync(request);
    return Results.Created($"/api/products/{response.Id}", response);
})
.WithName("CreateProduct")
.WithSummary("Create a new product")
.Produces<CreateProductResponse>(StatusCodes.Status201Created)
.ProducesProblem(StatusCodes.Status400BadRequest);

// Health check endpoint
app.MapGet("/health", () => Results.Ok(new { Status = "Healthy", Timestamp = DateTime.UtcNow }))
    .WithName("HealthCheck")
    .WithTags("Health")
    .WithSummary("Health check endpoint")
    .ExcludeFromDescription();

// ============================================================================
// FEATURE EXAMPLES - Demonstrates Relay Framework Capabilities
// ============================================================================

var examples = app.MapGroup("/api/examples")
    .WithTags("Feature Examples")
    .WithOpenApi();

// 01 - Validation Example
examples.MapPost("/register", async (RegisterUserRequest request) =>
{
    var response = await relay.SendAsync(request);
    return Results.Created($"/api/users/{response.UserId}", response);
})
.WithName("RegisterUser")
.WithSummary("Example: Advanced user registration with 78+ validation rules + AI optimization")
.WithDescription(@"Demonstrates comprehensive validation system with AI optimization:

ðŸŽ¯ VALIDATION RULES (78+ total):
â€¢ Basic: Username, Email, Password, Age, Phone, URL, Credit Card
â€¢ Advanced: Postal Code, GPS Coordinates, File Size/Extension, Percentage
â€¢ Technical: Currency Amount, Cron Expression, Semantic Version, Time, Duration
â€¢ Standards: MIME Type, Color, Domain, IPv6, IBAN, VIN, Hex Color, MAC Address
â€¢ Data Formats: JSON, XML, JWT, Currency/Language/Country/Time Zone codes
â€¢ Security: Base64, GUID, Date validation

ðŸ¤– AI OPTIMIZATION FEATURES:
â€¢ Smart Batching: Automatically groups similar validation requests
â€¢ Intelligent Caching: AI predicts which validations to cache
â€¢ Performance Tracking: Metrics collection for ML model training
â€¢ Auto-Optimization: AI applies performance improvements automatically
â€¢ Risk Management: Confidence scores and safety thresholds

ðŸ”§ PIPELINE INTEGRATION:
â€¢ Pre-processor: Business rule validation (disposable emails, weak passwords)
â€¢ Pipeline Behavior: Comprehensive metrics tracking
â€¢ Post-processor: Audit logging, welcome emails, event triggering

ðŸ“Š PERFORMANCE METRICS:
Try calling this endpoint multiple times to see:
- Request batching in action
- Intelligent caching benefits
- Processing time improvements
- AI confidence scores and optimization strategies")
.Produces<RegisterUserResponse>(StatusCodes.Status201Created)
.ProducesProblem(StatusCodes.Status400BadRequest);

// 02 - Pre/Post Processors Example
examples.MapPost("/orders", async (CreateOrderRequest request) =>
{
    var response = await relay.SendAsync(request);
    return Results.Created($"/api/orders/{response.OrderId}", response);
})
.WithName("CreateOrder")
.WithSummary("Example: Order creation with pre/post processors")
.WithDescription(@"Demonstrates:
- Pre-processor: Stock validation, price calculation (runs BEFORE handler)
- Handler: Order creation logic
- Post-processor: Audit log, email notification (runs AFTER handler)")
.Produces<CreateOrderResponse>(StatusCodes.Status201Created);

// 03 - Exception Handling Example
examples.MapPost("/payment", async (ProcessPaymentRequest request) =>
{
    var response = await relay.SendAsync(request);
    return Results.Ok(response);
})
.WithName("ProcessPayment")
.WithSummary("Example: Payment processing with exception handling")
.WithDescription(@"Demonstrates:
- Graceful exception handling
- InsufficientFundsException handler
- Fallback response instead of throwing
Try with amount > 100 to trigger exception")
.Produces<PaymentResult>(StatusCodes.Status200OK);

// 04 - Pipeline Behaviors (automatically applied to all requests)
// No specific endpoint needed - LoggingBehavior runs for ALL requests

// 05 - Caching Example
examples.MapGet("/products", async () =>
{
    var response = await relay.SendAsync(new GetCachedProductsRequest());
    return Results.Ok(response);
})
.WithName("GetCachedProducts")
.WithSummary("Example: Cached product list")
.WithDescription(@"Demonstrates:
- Response caching
- First request: Slow (1s delay)
- Subsequent requests: Fast (from cache)
- Cache duration: 5 minutes")
.Produces<List<CachedProduct>>(StatusCodes.Status200OK);

// 06 - Notifications/Events Example
examples.MapPost("/user-created", async (UserCreatedNotification notification) =>
{
    await relay.PublishAsync(notification);
    return Results.Ok(new { Message = "Notification published to multiple handlers" });
})
.WithName("PublishUserCreated")
.WithSummary("Example: Event-driven notifications")
.WithDescription(@"Demonstrates:
- Multiple handlers for same event
- Handler 1: Send welcome email
- Handler 2: Track analytics
All handlers run in parallel")
.Produces(StatusCodes.Status200OK);

// 07 - Streaming Example
examples.MapGet("/logs/stream", async (DateTime? startDate) =>
{
    var request = new StreamLogsRequest(startDate ?? DateTime.UtcNow.AddHours(-1));
    var stream = await relay.SendAsync(request);

    return Results.Ok(stream);
})
.WithName("StreamLogs")
.WithSummary("Example: Real-time log streaming")
.WithDescription(@"Demonstrates:
- IAsyncEnumerable streaming
- Real-time data flow
- Backpressure handling
- Memory-efficient for large datasets")
.Produces<IAsyncEnumerable<LogEntry>>(StatusCodes.Status200OK);

// 08 - Transactions Example
examples.MapPost("/order-transaction", async (CreateOrderTransactionRequest request) =>
{
    var response = await relay.SendAsync(request);
    return Results.Created($"/api/orders/{response.OrderId}", response);
})
.WithName("CreateOrderWithTransaction")
.WithSummary("Example: Multi-step transaction with ACID guarantees")
.WithDescription(@"Demonstrates:
- Automatic transaction management
- Multiple database operations
- All succeed together or rollback together
- ACID guarantees")
.Produces<OrderTransactionResult>(StatusCodes.Status201Created);

// 09 - AI Optimization Example
examples.MapPost("/recommendations", async (GetProductRecommendationsRequest request) =>
{
    var response = await relay.SendAsync(request);
    return Results.Ok(response);
})
.WithName("GetProductRecommendations")
.WithSummary("Example: AI-powered product recommendations")
.WithDescription(@"Demonstrates:
- AI-powered performance optimization
- Smart Batching: Automatically batches high-frequency requests
- Intelligent Caching: AI predicts which results should be cached
- Performance Tracking: Metrics for ML model training
- Auto-Optimization: AI can automatically apply optimizations
Try calling this endpoint multiple times to see batching and caching in action!")
.Produces<ProductRecommendationsResponse>(StatusCodes.Status200OK);

// 10 - Advanced Validation Example
examples.MapPost("/advanced-register", async (AdvancedUserRegistrationRequest request) =>
{
    var response = await relay.SendAsync(request);
    return Results.Created($"/api/users/{response.UserId}", response);
})
.WithName("AdvancedUserRegistration")
.WithSummary("Example: Advanced user registration with 40+ validation rules + AI optimization")
.WithDescription(@"Demonstrates comprehensive validation system with AI optimization:

ðŸŽ¯ ADVANCED VALIDATION RULES (40+ total):
â€¢ Basic: Username, Email, Password, Age, Phone, URL, Credit Card
â€¢ Advanced: Postal Code, GPS Coordinates, File Size/Extension, Percentage
â€¢ Technical: Currency Amount, Cron Expression, Semantic Version, Time, Duration
â€¢ Standards: MIME Type, Color, Domain, IPv6, IBAN, VIN, Hex Color, MAC Address
â€¢ Data Formats: JSON, XML, JWT, Currency/Language/Country/Time Zone codes
â€¢ Security: Base64, GUID, Date validation

ðŸ¤– AI OPTIMIZATION FEATURES:
â€¢ Smart Batching: Automatically groups similar validation requests
â€¢ Intelligent Caching: AI predicts which validations to cache
â€¢ Performance Tracking: Metrics collection for ML model training
â€¢ Auto-Optimization: AI applies performance improvements automatically
â€¢ Risk Management: Confidence scores and safety thresholds

ðŸ”§ PIPELINE INTEGRATION:
â€¢ Comprehensive validation pipeline with metrics tracking
â€¢ Advanced business rule validation
â€¢ Performance monitoring and optimization

ðŸ“Š PERFORMANCE METRICS:
Shows validation processing time and optimization strategies.
Try with different combinations of optional fields to see comprehensive validation in action!")
.Produces<AdvancedUserRegistrationResponse>(StatusCodes.Status201Created)
.ProducesProblem(StatusCodes.Status400BadRequest);

app.Run();
