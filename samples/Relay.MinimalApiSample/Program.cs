using Relay.Core.Contracts.Core;
using Relay.Core.Validation.Extensions;
using Relay.Core.Pipeline.Extensions;
using Relay.MinimalApiSample.Features.Products;
using Relay.MinimalApiSample.Features.Users;
using Relay.MinimalApiSample.Infrastructure;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new() {
        Title = "Relay Minimal API Sample",
        Version = "v1",
        Description = "A minimal API sample demonstrating Relay framework features"
    });
});

// Register InMemoryDatabase as singleton
builder.Services.AddSingleton<InMemoryDatabase>();

// Register all handlers and core Relay services (generated by source generator)
builder.Services.AddRelay();

// Add additional Relay features
// This includes: validation, pre/post processors, and exception handlers
builder.Services
    .AddRelayValidation()
    .AddRelayPrePostProcessors()
    .AddRelayExceptionHandlers();

var app = builder.Build();

// Configure the HTTP request pipeline
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

// Get IRelay instance for handling requests
var relay = app.Services.GetRequiredService<IRelay>();

// User endpoints
var users = app.MapGroup("/api/users")
    .WithTags("Users")
    .WithOpenApi();

users.MapGet("/", async () =>
{
    var response = await relay.SendAsync(new GetAllUsersRequest());
    return Results.Ok(response);
})
.WithName("GetAllUsers")
.WithSummary("Get all users")
.Produces<GetAllUsersResponse>();

users.MapGet("/{id:guid}", async (Guid id) =>
{
    var response = await relay.SendAsync(new GetUserRequest(id));
    return response != null ? Results.Ok(response) : Results.NotFound();
})
.WithName("GetUser")
.WithSummary("Get user by ID")
.Produces<GetUserResponse>()
.Produces(StatusCodes.Status404NotFound);

users.MapPost("/", async (CreateUserRequest request) =>
{
    var response = await relay.SendAsync(request);
    return Results.Created($"/api/users/{response.Id}", response);
})
.WithName("CreateUser")
.WithSummary("Create a new user")
.Produces<CreateUserResponse>(StatusCodes.Status201Created)
.ProducesProblem(StatusCodes.Status400BadRequest);

// Product endpoints
var products = app.MapGroup("/api/products")
    .WithTags("Products")
    .WithOpenApi();

products.MapGet("/", async () =>
{
    var response = await relay.SendAsync(new GetAllProductsRequest());
    return Results.Ok(response);
})
.WithName("GetAllProducts")
.WithSummary("Get all products")
.Produces<GetAllProductsResponse>();

products.MapGet("/{id:guid}", async (Guid id) =>
{
    var response = await relay.SendAsync(new GetProductRequest(id));
    return response != null ? Results.Ok(response) : Results.NotFound();
})
.WithName("GetProduct")
.WithSummary("Get product by ID")
.Produces<GetProductResponse>()
.Produces(StatusCodes.Status404NotFound);

products.MapPost("/", async (CreateProductRequest request) =>
{
    var response = await relay.SendAsync(request);
    return Results.Created($"/api/products/{response.Id}", response);
})
.WithName("CreateProduct")
.WithSummary("Create a new product")
.Produces<CreateProductResponse>(StatusCodes.Status201Created)
.ProducesProblem(StatusCodes.Status400BadRequest);

// Health check endpoint
app.MapGet("/health", () => Results.Ok(new { Status = "Healthy", Timestamp = DateTime.UtcNow }))
    .WithName("HealthCheck")
    .WithTags("Health")
    .WithSummary("Health check endpoint")
    .ExcludeFromDescription();

app.Run();
