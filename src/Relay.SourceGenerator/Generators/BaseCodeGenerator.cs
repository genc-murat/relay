using System;
using System.Text;

namespace Relay.SourceGenerator.Generators
{
    /// <summary>
    /// Base class for all code generators providing common functionality.
    /// Implements template method pattern for consistent code generation structure.
    /// Uses StringBuilder pooling to reduce memory allocations.
    /// </summary>
    public abstract class BaseCodeGenerator : ICodeGenerator
    {
        // StringBuilder pool to reduce allocations
        [ThreadStatic]
        private static StringBuilder? t_cachedStringBuilder;

        // Pool configuration optimized for code generation workloads
        private const int DefaultStringBuilderCapacity = 1024;      // 1KB initial
        private const int MaxPooledCapacity = 16 * 1024;             // 16KB maximum

        /// <summary>
        /// Gets a StringBuilder from the pool or creates a new one.
        /// </summary>
        protected static StringBuilder GetStringBuilder()
        {
            var sb = t_cachedStringBuilder;
            if (sb != null)
            {
                t_cachedStringBuilder = null;
                sb.Clear();
                return sb;
            }
            return new StringBuilder(DefaultStringBuilderCapacity);
        }

        /// <summary>
        /// Returns a StringBuilder to the pool if it's within size limits.
        /// </summary>
        protected static void ReturnStringBuilder(StringBuilder sb)
        {
            // Cache StringBuilder if it's within reasonable size limits
            // Modern generated code often exceeds 4KB, so we allow up to 16KB
            if (sb.Capacity <= MaxPooledCapacity)
            {
                t_cachedStringBuilder = sb;
            }
        }

        /// <inheritdoc/>
        public abstract string GeneratorName { get; }

        /// <inheritdoc/>
        public abstract string OutputFileName { get; }

        /// <inheritdoc/>
        public virtual int Priority => 100; // Default priority

        /// <inheritdoc/>
        public virtual bool CanGenerate(HandlerDiscoveryResult result)
        {
            // Default implementation: can generate if there are handlers
            return result != null && result.Handlers.Count > 0;
        }

        /// <inheritdoc/>
        public string Generate(HandlerDiscoveryResult result, GenerationOptions options)
        {
            if (result == null)
                throw new ArgumentNullException(nameof(result));

            if (options == null)
                throw new ArgumentNullException(nameof(options));

            var builder = GetStringBuilder();

            try
            {
                // Generate file header
                AppendFileHeader(builder, options);

                // Generate nullable context if enabled
                if (options.EnableNullableContext)
                {
                    builder.AppendLine("#nullable enable");
                    builder.AppendLine();
                }

                // Generate usings
                AppendUsings(builder, result, options);
                builder.AppendLine();

                // Generate namespace
                var ns = GetNamespace(result, options);
                builder.AppendLine($"namespace {ns}");
                builder.AppendLine("{");

                // Generate main content
                GenerateContent(builder, result, options);

                builder.AppendLine("}");

                if (options.EnableNullableContext)
                {
                    builder.AppendLine("#nullable restore");
                }

                return builder.ToString();
            }
            finally
            {
                // Always return StringBuilder to pool
                ReturnStringBuilder(builder);
            }
        }

        /// <summary>
        /// Appends the file header with auto-generation warning.
        /// </summary>
        protected virtual void AppendFileHeader(StringBuilder builder, GenerationOptions options)
        {
            builder.AppendLine("// <auto-generated />");
            builder.AppendLine("// This file was automatically generated by Relay.SourceGenerator.");
            builder.AppendLine("// Do not modify this file directly. Changes will be overwritten on next build.");
            builder.AppendLine($"// Generator: {GeneratorName}");
            builder.AppendLine($"// Generated: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC");
            builder.AppendLine();
        }

        /// <summary>
        /// Gets the namespace for the generated code.
        /// </summary>
        protected virtual string GetNamespace(HandlerDiscoveryResult result, GenerationOptions options)
        {
            return options.CustomNamespace ?? "Relay.Generated";
        }

        /// <summary>
        /// Appends using directives required by the generator.
        /// </summary>
        protected virtual void AppendUsings(StringBuilder builder, HandlerDiscoveryResult result, GenerationOptions options)
        {
            builder.AppendLine("using System;");
            builder.AppendLine("using System.CodeDom.Compiler;");
            builder.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        }

        /// <summary>
        /// Generates the main content of the file. Must be implemented by derived classes.
        /// </summary>
        /// <param name="builder">StringBuilder to append content to</param>
        /// <param name="result">Handler discovery result</param>
        /// <param name="options">Generation options</param>
        protected abstract void GenerateContent(StringBuilder builder, HandlerDiscoveryResult result, GenerationOptions options);

        /// <summary>
        /// Helper method to append indented line.
        /// </summary>
        protected void AppendIndented(StringBuilder builder, int indentLevel, string content)
        {
            builder.Append(new string(' ', indentLevel * 4));
            builder.AppendLine(content);
        }

        /// <summary>
        /// Helper method to generate XML documentation comment.
        /// </summary>
        protected void AppendXmlDoc(StringBuilder builder, int indentLevel, string summary)
        {
            AppendIndented(builder, indentLevel, "/// <summary>");
            AppendIndented(builder, indentLevel, $"/// {summary}");
            AppendIndented(builder, indentLevel, "/// </summary>");
        }

        /// <summary>
        /// Helper method to generate GeneratedCode attribute.
        /// </summary>
        protected void AppendGeneratedCodeAttribute(StringBuilder builder, int indentLevel)
        {
            AppendIndented(builder, indentLevel, $"[GeneratedCode(\"Relay.SourceGenerator\", \"{GetType().Assembly.GetName().Version}\")]");
        }
    }
}
