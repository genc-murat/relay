using Microsoft.CodeAnalysis;
using System;
using System.Linq;
using System.Text;

namespace Relay.SourceGenerator
{
    /// <summary>
    /// Generates handler registry code for compile-time request routing.
    /// </summary>
    public class HandlerRegistryGenerator
    {
        private readonly RelayCompilationContext _context;

        public HandlerRegistryGenerator(RelayCompilationContext context)
        {
            _context = context ?? throw new ArgumentNullException(nameof(context));
        }

        /// <summary>
        /// Generates the handler registry source code.
        /// </summary>
        public string GenerateHandlerRegistry(HandlerDiscoveryResult discoveryResult)
        {
            var sourceBuilder = new StringBuilder();

            // File header
            sourceBuilder.AppendLine("// <auto-generated />");
            sourceBuilder.AppendLine("// Generated by Relay.SourceGenerator");
            sourceBuilder.AppendLine($"// Generation time: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC");
            sourceBuilder.AppendLine();

            // Usings
            sourceBuilder.AppendLine("using System;");
            sourceBuilder.AppendLine("using System.Collections.Generic;");
            sourceBuilder.AppendLine("using System.Linq;");
            sourceBuilder.AppendLine("using System.Reflection;");
            sourceBuilder.AppendLine("using Relay.Core;");
            sourceBuilder.AppendLine();

            // Namespace
            sourceBuilder.AppendLine("namespace Relay.Generated");
            sourceBuilder.AppendLine("{");

            // Generate handler metadata classes
            GenerateHandlerMetadataClasses(sourceBuilder);

            // Generate handler registry class
            GenerateHandlerRegistryClass(sourceBuilder, discoveryResult);

            sourceBuilder.AppendLine("}");

            return sourceBuilder.ToString();
        }

        private void GenerateHandlerMetadataClasses(StringBuilder sourceBuilder)
        {
            // Generate handler metadata classes
            sourceBuilder.AppendLine("    /// <summary>");
            sourceBuilder.AppendLine("    /// Metadata for a registered handler.");
            sourceBuilder.AppendLine("    /// </summary>");
            sourceBuilder.AppendLine("    public class HandlerMetadata");
            sourceBuilder.AppendLine("    {");
            sourceBuilder.AppendLine("        public Type RequestType { get; set; } = null!;");
            sourceBuilder.AppendLine("        public Type? ResponseType { get; set; }");
            sourceBuilder.AppendLine("        public Type HandlerType { get; set; } = null!;");
            sourceBuilder.AppendLine("        public MethodInfo HandlerMethod { get; set; } = null!;");
            sourceBuilder.AppendLine("        public string HandlerName { get; set; } = \"default\";");
            sourceBuilder.AppendLine("        public int Priority { get; set; } = 0;");
            sourceBuilder.AppendLine("        public HandlerKind Kind { get; set; }");
            sourceBuilder.AppendLine("        public bool IsStatic { get; set; }");
            sourceBuilder.AppendLine("    }");
            sourceBuilder.AppendLine();

            sourceBuilder.AppendLine("    /// <summary>");
            sourceBuilder.AppendLine("    /// Defines the kind of handler.");
            sourceBuilder.AppendLine("    /// </summary>");
            sourceBuilder.AppendLine("    public enum HandlerKind");
            sourceBuilder.AppendLine("    {");
            sourceBuilder.AppendLine("        Request,");
            sourceBuilder.AppendLine("        Notification,");
            sourceBuilder.AppendLine("        Stream,");
            sourceBuilder.AppendLine("        Pipeline");
            sourceBuilder.AppendLine("    }");
            sourceBuilder.AppendLine();
        }

        private void GenerateHandlerRegistryClass(StringBuilder sourceBuilder, HandlerDiscoveryResult discoveryResult)
        {
            sourceBuilder.AppendLine("    /// <summary>");
            sourceBuilder.AppendLine("    /// Generated handler registry for compile-time request routing.");
            sourceBuilder.AppendLine("    /// </summary>");
            sourceBuilder.AppendLine("    public static class HandlerRegistry");
            sourceBuilder.AppendLine("    {");

            // Generate handler metadata collections
            GenerateHandlerMetadata(sourceBuilder, discoveryResult);

            // Generate lookup methods
            GenerateLookupMethods(sourceBuilder, discoveryResult);

            sourceBuilder.AppendLine("    }");
        }

        private void GenerateHandlerMetadata(StringBuilder sourceBuilder, HandlerDiscoveryResult discoveryResult)
        {
            sourceBuilder.AppendLine("        /// <summary>");
            sourceBuilder.AppendLine("        /// All registered handler metadata.");
            sourceBuilder.AppendLine("        /// </summary>");
            sourceBuilder.AppendLine("        public static readonly List<HandlerMetadata> AllHandlers = new()");
            sourceBuilder.AppendLine("        {");

            foreach (var handler in discoveryResult.Handlers)
            {
                GenerateHandlerMetadataEntry(sourceBuilder, handler);
            }

            sourceBuilder.AppendLine("        };");
            sourceBuilder.AppendLine();
        }

        private void GenerateHandlerMetadataEntry(StringBuilder sourceBuilder, HandlerInfo handler)
        {
            var requestType = handler.MethodSymbol.Parameters[0].Type.ToDisplayString();
            var responseType = GetResponseType(handler);
            var handlerType = handler.MethodSymbol.ContainingType.ToDisplayString();
            var methodName = handler.MethodSymbol.Name;
            var handlerName = GetHandlerName(handler);
            var priority = GetHandlerPriority(handler);
            var kind = GetHandlerKind(handler);
            var isStatic = handler.MethodSymbol.IsStatic;

            sourceBuilder.AppendLine("            new HandlerMetadata");
            sourceBuilder.AppendLine("            {");
            sourceBuilder.AppendLine($"                RequestType = typeof({requestType}),");

            if (!string.IsNullOrWhiteSpace(responseType) && responseType != "void")
            {
                sourceBuilder.AppendLine($"                ResponseType = typeof({responseType}),");
            }

            sourceBuilder.AppendLine($"                HandlerType = typeof({handlerType}),");
            sourceBuilder.AppendLine($"                HandlerMethod = typeof({handlerType}).GetMethod(\"{methodName}\")!,");
            sourceBuilder.AppendLine($"                HandlerName = \"{handlerName}\",");
            sourceBuilder.AppendLine($"                Priority = {priority},");
            sourceBuilder.AppendLine($"                Kind = HandlerKind.{kind},");
            sourceBuilder.AppendLine($"                IsStatic = {isStatic.ToString().ToLower()}");
            sourceBuilder.AppendLine("            },");
        }

        private void GenerateLookupMethods(StringBuilder sourceBuilder, HandlerDiscoveryResult discoveryResult)
        {
            sourceBuilder.AppendLine("        /// <summary>");
            sourceBuilder.AppendLine("        /// Gets all handlers for a specific request type.");
            sourceBuilder.AppendLine("        /// </summary>");
            sourceBuilder.AppendLine("        public static List<HandlerMetadata> GetHandlersForRequest(Type requestType)");
            sourceBuilder.AppendLine("        {");
            sourceBuilder.AppendLine("            return AllHandlers");
            sourceBuilder.AppendLine("                .Where(h => h.RequestType == requestType && h.Kind == HandlerKind.Request)");
            sourceBuilder.AppendLine("                .OrderByDescending(h => h.Priority)");
            sourceBuilder.AppendLine("                .ToList();");
            sourceBuilder.AppendLine("        }");
            sourceBuilder.AppendLine();

            sourceBuilder.AppendLine("        /// <summary>");
            sourceBuilder.AppendLine("        /// Gets a specific named handler for a request type.");
            sourceBuilder.AppendLine("        /// </summary>");
            sourceBuilder.AppendLine("        public static HandlerMetadata? GetNamedHandler(Type requestType, string handlerName)");
            sourceBuilder.AppendLine("        {");
            sourceBuilder.AppendLine("            return AllHandlers");
            sourceBuilder.AppendLine("                .FirstOrDefault(h => h.RequestType == requestType && ");
            sourceBuilder.AppendLine("                                   h.Kind == HandlerKind.Request && ");
            sourceBuilder.AppendLine("                                   h.HandlerName == handlerName);");
            sourceBuilder.AppendLine("        }");
            sourceBuilder.AppendLine();

            sourceBuilder.AppendLine("        /// <summary>");
            sourceBuilder.AppendLine("        /// Gets all notification handlers for a specific notification type.");
            sourceBuilder.AppendLine("        /// </summary>");
            sourceBuilder.AppendLine("        public static List<HandlerMetadata> GetNotificationHandlers(Type notificationType)");
            sourceBuilder.AppendLine("        {");
            sourceBuilder.AppendLine("            return AllHandlers");
            sourceBuilder.AppendLine("                .Where(h => h.RequestType == notificationType && h.Kind == HandlerKind.Notification)");
            sourceBuilder.AppendLine("                .OrderByDescending(h => h.Priority)");
            sourceBuilder.AppendLine("                .ToList();");
            sourceBuilder.AppendLine("        }");
            sourceBuilder.AppendLine();
        }

        private string GetResponseType(HandlerInfo handler)
        {
            ITypeSymbol returnType = handler.MethodSymbol.ReturnType;
            var returnTypeString = returnType.ToDisplayString();

            // Handle ValueTask<T>, Task<T>
            if (returnTypeString.StartsWith("System.Threading.Tasks.ValueTask<") ||
                returnTypeString.StartsWith("System.Threading.Tasks.Task<"))
            {
                var genericArgs = ((INamedTypeSymbol)returnType).TypeArguments;
                if (genericArgs.Length > 0)
                {
                    return genericArgs[0].ToDisplayString();
                }
            }
            else if (returnTypeString.StartsWith("System.Collections.Generic.IAsyncEnumerable<"))
            {
                // Stream handler
                var genericArgs = ((INamedTypeSymbol)returnType).TypeArguments;
                if (genericArgs.Length > 0)
                {
                    return genericArgs[0].ToDisplayString();
                }
            }
            else if (!returnTypeString.Contains("Task") && returnType.SpecialType != SpecialType.System_Void)
            {
                // Direct return type
                return returnTypeString;
            }

            return "void";
        }

        private string GetHandlerName(HandlerInfo handler)
        {
            var handleAttribute = handler.Attributes.FirstOrDefault(a => a.Type == RelayAttributeType.Handle);
            if (handleAttribute?.AttributeData != null)
            {
                // Try to get the Name property from the attribute
                var nameArg = handleAttribute.AttributeData.NamedArguments
                    .FirstOrDefault(arg => arg.Key == "Name");

                if (nameArg.Value.Value is string name && !string.IsNullOrWhiteSpace(name))
                {
                    return name;
                }
            }

            return "default";
        }

        private int GetHandlerPriority(HandlerInfo handler)
        {
            foreach (var attribute in handler.Attributes)
            {
                if (attribute.AttributeData != null)
                {
                    var priorityArg = attribute.AttributeData.NamedArguments
                        .FirstOrDefault(arg => arg.Key == "Priority");

                    if (priorityArg.Value.Value is int priority)
                    {
                        return priority;
                    }
                }
            }

            return 0;
        }

        private string GetHandlerKind(HandlerInfo handler)
        {
            if (handler.Attributes.Any(a => a.Type == RelayAttributeType.Handle))
            {
                var returnType = handler.MethodSymbol.ReturnType.ToDisplayString();
                if (returnType.StartsWith("System.Collections.Generic.IAsyncEnumerable"))
                {
                    return "Stream";
                }
                return "Request";
            }

            if (handler.Attributes.Any(a => a.Type == RelayAttributeType.Notification))
            {
                return "Notification";
            }

            if (handler.Attributes.Any(a => a.Type == RelayAttributeType.Pipeline))
            {
                return "Pipeline";
            }

            return "Request";
        }
    }
}