using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Relay.Core;
using Relay.Core.Configuration.Options;
using Relay.Core.Contracts.Core;
using Relay.Core.Contracts.Dispatchers;
using Relay.Core.Contracts.Infrastructure;
using Relay.Core.Implementation.Core;
using Relay.Core.Implementation.Dispatchers;
using Relay.Core.Implementation.Fallback;
using Relay.Core.Extensions;
using Relay.Core.AI;
using Relay.Core.Performance;
using Relay.Core.Validation.Extensions;
using Relay.Core.Pipeline.Extensions;
using Relay.Core.Telemetry;
using System;
using System.Reflection;
using RelayScenario = Relay.RelayScenario;

namespace Microsoft.Extensions.DependencyInjection;

/// <summary>
/// Centralized and optimized extension methods for configuring the Relay framework.
/// This partial class works together with the source generator to provide complete functionality.
/// </summary>
public static partial class RelayServiceCollectionExtensions
{
    // Note: The AddRelay() method is generated by RelayIncrementalGenerator
    // It automatically registers all discovered handlers and core services

    /// <summary>
    /// Adds Relay framework with validation, pipeline behaviors, and exception handlers.
    /// This method extends the generated AddRelay() with commonly used features.
    /// </summary>
    /// <param name="services">The service collection to add services to.</param>
    /// <param name="configure">Optional configuration action for Relay options.</param>
    /// <returns>The service collection for chaining.</returns>
    public static IServiceCollection AddRelayWithFeatures(
        this IServiceCollection services,
        Action<RelayOptions>? configure = null)
    {
        // Ensure core services are registered (source generator might not have run)
        services.AddRelayCore(configure);

        return services
            .AddRelayValidation()
            .AddRelayPrePostProcessors()
            .AddRelayExceptionHandlers();
    }

    /// <summary>
    /// Adds complete Relay framework with advanced features including AI optimization and performance monitoring.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="configureRelay">Optional configuration action for Relay options.</param>
    /// <param name="configureAI">Optional configuration action for AI optimization options.</param>
    /// <returns>The service collection for chaining.</returns>
    public static IServiceCollection AddRelayWithAdvancedFeatures(
        this IServiceCollection services,
        Action<RelayOptions>? configureRelay = null,
        Action<AIOptimizationOptions>? configureAI = null)
    {
        // Ensure core services are registered (source generator might not have run)
        services.AddRelayCore(configureRelay);

        return services
            .AddRelayValidation()
            .AddRelayPrePostProcessors()
            .AddRelayExceptionHandlers()
            .AddRelayTransactions()
            .AddRelayTelemetry()
            .AddRelayPerformanceOptimizations()
            .AddAdvancedAIOptimization(configureAI ?? (_ => { }), enableAdvancedFeatures: true);
    }

    /// <summary>
    /// Adds Relay framework optimized for specific scenarios.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="scenario">The optimization scenario.</param>
    /// <param name="configure">Optional configuration action.</param>
    /// <returns>The service collection for chaining.</returns>
    public static IServiceCollection AddRelayForScenario(
        this IServiceCollection services,
        RelayScenario scenario,
        Action<RelayOptions>? configure = null)
    {
        return scenario switch
        {
            RelayScenario.Minimal => services
                .AddRelayCore(configure),

            RelayScenario.WebApi => services
                .AddRelayCore(configure)
                .AddRelayValidation()
                .AddRelayPrePostProcessors()
                .AddRelayExceptionHandlers()
                .AddRelayTelemetry(),

            RelayScenario.HighPerformance => services
                .AddRelayCore(configure)
                .AddRelayValidation()
                .AddRelayPerformanceOptimizations()
                .WithPerformanceProfile(PerformanceProfile.HighThroughput)
                .AddAIOptimizationForScenario(AIOptimizationScenario.HighThroughput),

            RelayScenario.EventDriven => services
                .AddRelayCore(configure)
                .AddRelayValidation()
                .AddRelayPrePostProcessors()
                .AddRelayExceptionHandlers()
                .AddRelayTransactions()
                .AddRelayTelemetry(),

            RelayScenario.Microservices => services
                .AddRelayCore(configure)
                .AddRelayValidation()
                .AddRelayPrePostProcessors()
                .AddRelayExceptionHandlers()
                .AddRelayTransactions()
                .AddRelayTelemetry()
                .AddRelayPerformanceOptimizations()
                .AddAIOptimizationForScenario(AIOptimizationScenario.Production),

            _ => throw new ArgumentOutOfRangeException(nameof(scenario), scenario, "Unknown Relay scenario")
        };
    }

    /// <summary>
    /// Adds Relay framework from configuration.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="configuration">The configuration instance.</param>
    /// <param name="sectionName">Configuration section name (default: "Relay").</param>
    /// <returns>The service collection for chaining.</returns>
    public static IServiceCollection AddRelayFromConfiguration(
        this IServiceCollection services,
        IConfiguration configuration,
        string sectionName = "Relay")
    {
        ServiceRegistrationHelper.ValidateServices(services);
        ArgumentNullException.ThrowIfNull(configuration);

        // Bind Relay options from configuration
        services.RegisterWithConfiguration<RelayOptions>(
            configuration,
            sectionName,
            serviceRegistrations: svc => svc.AddRelayCore());

        // Check for additional feature configurations
        var aiSection = configuration.GetSection($"{sectionName}:AI");
        if (aiSection.Exists())
        {
            services.AddAIOptimization(configuration, $"{sectionName}:AI");
        }

        var performanceSection = configuration.GetSection($"{sectionName}:Performance");
        if (performanceSection.Exists())
        {
            services.AddRelayPerformanceOptimizations();
        }

        return services;
    }

    /// <summary>
    /// Adds Relay framework with automatic handler discovery from assemblies.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="assemblies">Assemblies to scan for handlers.</param>
    /// <param name="configure">Optional configuration action.</param>
    /// <returns>The service collection for chaining.</returns>
    public static IServiceCollection AddRelayWithHandlerDiscovery(
        this IServiceCollection services,
        Assembly[] assemblies,
        Action<RelayOptions>? configure = null)
    {
        // Ensure core services are registered
        services.AddRelayCore(configure);

        foreach (var assembly in assemblies)
        {
            // Discover and register validation rules
            services.AddValidationRulesFromAssembly(assembly);
        }

        return services;
    }

    /// <summary>
    /// Adds Relay framework with automatic handler discovery from the calling assembly.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="configure">Optional configuration action.</param>
    /// <returns>The service collection for chaining.</returns>
    public static IServiceCollection AddRelayWithHandlerDiscovery(
        this IServiceCollection services,
        Action<RelayOptions>? configure = null)
    {
        return services.AddRelayWithHandlerDiscovery(
            new[] { Assembly.GetCallingAssembly() },
            configure);
    }

    /// <summary>
    /// Adds core Relay services without additional features.
    /// This is the foundation for all other AddRelay methods.
    /// </summary>
    /// <param name="services">The service collection to add services to.</param>
    /// <param name="configure">Optional configuration action for Relay options.</param>
    /// <returns>The service collection for chaining.</returns>
    public static IServiceCollection AddRelayCore(
        this IServiceCollection services,
        Action<RelayOptions>? configure = null)
    {
        return services.RegisterCoreServices(svc =>
        {
            // Configure Relay options
            if (configure != null)
            {
                ServiceRegistrationHelper.ConfigureOptions<RelayOptions>(svc, configure);
            }
            else
            {
                ServiceRegistrationHelper.ConfigureOptionsWithDefault<RelayOptions>(svc);
            }

            // Register core Relay services
            ServiceRegistrationHelper.TryAddTransient<IRelay, RelayImplementation>(svc);

            // Register default dispatchers (will be replaced by generated ones if available)
            ServiceRegistrationHelper.TryAddTransient<IRequestDispatcher, FallbackRequestDispatcher>(svc);
            ServiceRegistrationHelper.TryAddTransient<IStreamDispatcher, StreamDispatcher>(svc);
            ServiceRegistrationHelper.TryAddTransient<INotificationDispatcher, NotificationDispatcher>(svc);

            // Register ServiceFactory delegate for MediatR-compatible service resolution
            ServiceRegistrationHelper.TryAddTransient<ServiceFactory>(svc, sp => sp.GetService);
        });
    }

    /// <summary>
    /// Legacy method for backward compatibility.
    /// Adds Relay configuration services to the service collection.
    /// Note: The main AddRelay method is now generated by the source generator.
    /// </summary>
    /// <param name="services">The service collection to add services to.</param>
    /// <returns>The service collection for chaining.</returns>
    [Obsolete("Use AddRelayCore() instead. This method will be removed in a future version.")]
    public static IServiceCollection AddRelayConfiguration(this IServiceCollection services)
    {
        return services.AddRelayCore();
    }
}