using Relay.SourceGenerator.Generators;
using System.Text;

namespace Relay.SourceGenerator.Tests;

public class BaseCodeGeneratorTests
{
    private class TestCodeGenerator : BaseCodeGenerator
    {
        public override string GeneratorName => "Test Generator";
        public override string OutputFileName => "TestOutput";

        protected override void GenerateContent(StringBuilder builder, HandlerDiscoveryResult result, GenerationOptions options)
        {
            builder.AppendLine("    // Test generated content");
            builder.AppendLine("    public class TestClass");
            builder.AppendLine("    {");
            builder.AppendLine("        public void TestMethod() { }");
            builder.AppendLine("    }");
        }
    }

    [Fact]
    public void GeneratorName_ReturnsExpectedValue()
    {
        // Arrange
        var generator = new TestCodeGenerator();

        // Act
        var name = generator.GeneratorName;

        // Assert
        Assert.Equal("Test Generator", name);
    }

    [Fact]
    public void OutputFileName_ReturnsExpectedValue()
    {
        // Arrange
        var generator = new TestCodeGenerator();

        // Act
        var fileName = generator.OutputFileName;

        // Assert
        Assert.Equal("TestOutput", fileName);
    }

    [Fact]
    public void Priority_ReturnsDefaultValue()
    {
        // Arrange
        var generator = new TestCodeGenerator();

        // Act
        var priority = generator.Priority;

        // Assert
        Assert.Equal(100, priority);
    }

    [Fact]
    public void CanGenerate_ReturnsTrue_WhenResultHasHandlers()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var result = new HandlerDiscoveryResult();
        result.Handlers.Add(new HandlerInfo()); // Add a handler

        // Act
        var canGenerate = generator.CanGenerate(result);

        // Assert
        Assert.True(canGenerate);
    }

    [Fact]
    public void CanGenerate_ReturnsFalse_WhenResultIsNull()
    {
        // Arrange
        var generator = new TestCodeGenerator();

        // Act
        var canGenerate = generator.CanGenerate(null!);

        // Assert
        Assert.False(canGenerate);
    }

    [Fact]
    public void CanGenerate_ReturnsFalse_WhenResultHasNoHandlers()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var result = new HandlerDiscoveryResult(); // No handlers

        // Act
        var canGenerate = generator.CanGenerate(result);

        // Assert
        Assert.False(canGenerate);
    }

    [Fact]
    public void Generate_ThrowsArgumentNullException_WhenResultIsNull()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var options = new GenerationOptions();

        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => generator.Generate(null!, options));
    }

    [Fact]
    public void Generate_ThrowsArgumentNullException_WhenOptionsIsNull()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var result = new HandlerDiscoveryResult();

        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => generator.Generate(result, null!));
    }

    [Fact]
    public void Generate_IncludesFileHeader()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var result = new HandlerDiscoveryResult();
        result.Handlers.Add(new HandlerInfo());
        var options = new GenerationOptions();

        // Act
        var code = generator.Generate(result, options);

        // Assert
        Assert.Contains("// <auto-generated />", code);
        Assert.Contains("// This file was automatically generated by Relay.SourceGenerator.", code);
        Assert.Contains("// Generator: Test Generator", code);
        Assert.Contains("// Generated:", code);
    }

    [Fact]
    public void Generate_IncludesNullableContext_WhenEnabled()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var result = new HandlerDiscoveryResult();
        result.Handlers.Add(new HandlerInfo());
        var options = new GenerationOptions { EnableNullableContext = true };

        // Act
        var code = generator.Generate(result, options);

        // Assert
        Assert.Contains("#nullable enable", code);
        Assert.Contains("#nullable restore", code);
    }

    [Fact]
    public void Generate_ExcludesNullableContext_WhenDisabled()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var result = new HandlerDiscoveryResult();
        result.Handlers.Add(new HandlerInfo());
        var options = new GenerationOptions { EnableNullableContext = false };

        // Act
        var code = generator.Generate(result, options);

        // Assert
        Assert.DoesNotContain("#nullable enable", code);
        Assert.DoesNotContain("#nullable restore", code);
    }

    [Fact]
    public void Generate_IncludesDefaultUsings()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var result = new HandlerDiscoveryResult();
        result.Handlers.Add(new HandlerInfo());
        var options = new GenerationOptions();

        // Act
        var code = generator.Generate(result, options);

        // Assert
        Assert.Contains("using System;", code);
        Assert.Contains("using System.CodeDom.Compiler;", code);
        Assert.Contains("using Microsoft.Extensions.DependencyInjection;", code);
    }

    [Fact]
    public void Generate_UsesDefaultNamespace_WhenNoCustomNamespace()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var result = new HandlerDiscoveryResult();
        result.Handlers.Add(new HandlerInfo());
        var options = new GenerationOptions();

        // Act
        var code = generator.Generate(result, options);

        // Assert
        Assert.Contains("namespace Relay.Generated", code);
    }

    [Fact]
    public void Generate_UsesCustomNamespace_WhenSpecified()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var result = new HandlerDiscoveryResult();
        result.Handlers.Add(new HandlerInfo());
        var options = new GenerationOptions { CustomNamespace = "My.Custom.Namespace" };

        // Act
        var code = generator.Generate(result, options);

        // Assert
        Assert.Contains("namespace My.Custom.Namespace", code);
    }

    [Fact]
    public void Generate_IncludesGeneratedContent()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var result = new HandlerDiscoveryResult();
        result.Handlers.Add(new HandlerInfo());
        var options = new GenerationOptions();

        // Act
        var code = generator.Generate(result, options);

        // Assert
        Assert.Contains("// Test generated content", code);
        Assert.Contains("public class TestClass", code);
        Assert.Contains("public void TestMethod() { }", code);
    }

    [Fact]
    public void AppendIndented_AppendsCorrectlyIndentedLine()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var builder = new StringBuilder();

        // Act
        generator.GetType().GetMethod("AppendIndented", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)!
            .Invoke(generator, new object[] { builder, 2, "test content" });

        // Assert
        var result = builder.ToString();
        Assert.Equal("        test content" + Environment.NewLine, result);
    }

    [Fact]
    public void AppendXmlDoc_GeneratesXmlDocumentation()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var builder = new StringBuilder();

        // Act
        generator.GetType().GetMethod("AppendXmlDoc", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)!
            .Invoke(generator, new object[] { builder, 1, "Test summary" });

        // Assert
        var result = builder.ToString();
        Assert.Contains("    /// <summary>", result);
        Assert.Contains("    /// Test summary", result);
        Assert.Contains("    /// </summary>", result);
    }

    [Fact]
    public void AppendGeneratedCodeAttribute_GeneratesAttribute()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var builder = new StringBuilder();

        // Act
        generator.GetType().GetMethod("AppendGeneratedCodeAttribute", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)!
            .Invoke(generator, new object[] { builder, 1 });

        // Assert
        var result = builder.ToString();
        Assert.Contains("[GeneratedCode(\"Relay.SourceGenerator\",", result);
    }

    [Fact]
    public void GetNamespace_ReturnsCustomNamespace_WhenSpecified()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var result = new HandlerDiscoveryResult();
        var options = new GenerationOptions { CustomNamespace = "Custom.Namespace" };

        // Act
        var ns = generator.GetType().GetMethod("GetNamespace", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)!
            .Invoke(generator, new object[] { result, options });

        // Assert
        Assert.Equal("Custom.Namespace", ns);
    }

    [Fact]
    public void GetNamespace_ReturnsDefaultNamespace_WhenNoCustomNamespace()
    {
        // Arrange
        var generator = new TestCodeGenerator();
        var result = new HandlerDiscoveryResult();
        var options = new GenerationOptions();

        // Act
        var ns = generator.GetType().GetMethod("GetNamespace", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)!
            .Invoke(generator, new object[] { result, options });

        // Assert
        Assert.Equal("Relay.Generated", ns);
    }
}