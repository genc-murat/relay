using Xunit;
using Relay.SourceGenerator.Helpers;

namespace Relay.SourceGenerator.Tests;

/// <summary>
/// Tests for CodeGenerationHelper utility methods.
/// </summary>
public class CodeGenerationHelperTests
{
    [Fact]
    public void GenerateFileHeader_IncludesAutoGeneratedComment()
    {
        // Act
        var result = CodeGenerationHelper.GenerateFileHeader("TestGenerator", includeTimestamp: false);

        // Assert
        Assert.Contains("// <auto-generated />", result);
        Assert.Contains("// Generated by TestGenerator", result);
    }

    [Fact]
    public void GenerateFileHeader_WithTimestamp_IncludesTimestamp()
    {
        // Act
        var result = CodeGenerationHelper.GenerateFileHeader("TestGenerator", includeTimestamp: true);

        // Assert
        Assert.Contains("// Generation time:", result);
    }

    [Fact]
    public void GenerateUsings_WithRelayNamespaces_IncludesRelayUsings()
    {
        // Act
        var result = CodeGenerationHelper.GenerateUsings(includeRelay: true);

        // Assert
        Assert.Contains("using System;", result);
        Assert.Contains("using Relay.Core;", result);
        Assert.Contains("using Relay.Core.Contracts.Core;", result);
    }

    [Fact]
    public void GenerateUsings_WithDINamespaces_IncludesDIUsings()
    {
        // Act
        var result = CodeGenerationHelper.GenerateUsings(includeRelay: false, includeDI: true);

        // Assert
        Assert.Contains("using Microsoft.Extensions.DependencyInjection;", result);
    }

    [Fact]
    public void GenerateUsings_WithAsyncNamespaces_IncludesAsyncUsings()
    {
        // Act
        var result = CodeGenerationHelper.GenerateUsings(includeRelay: false, includeAsync: true);

        // Assert
        Assert.Contains("using System.Threading;", result);
        Assert.Contains("using System.Threading.Tasks;", result);
    }

    [Fact]
    public void GenerateUsings_WithAdditionalNamespaces_IncludesAll()
    {
        // Act
        var result = CodeGenerationHelper.GenerateUsings(
            includeRelay: false,
            includeDI: false,
            includeAsync: false,
            "Custom.Namespace1",
            "Custom.Namespace2");

        // Assert
        Assert.Contains("using Custom.Namespace1;", result);
        Assert.Contains("using Custom.Namespace2;", result);
    }

    [Fact]
    public void GenerateParameterList_WithNoParameters_ReturnsEmpty()
    {
        // Act
        var result = CodeGenerationHelper.GenerateParameterList();

        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void GenerateParameterList_WithSingleParameter_ReturnsCorrectFormat()
    {
        // Act
        var result = CodeGenerationHelper.GenerateParameterList(("string", "name"));

        // Assert
        Assert.Equal("string name", result);
    }

    [Fact]
    public void GenerateParameterList_WithMultipleParameters_ReturnsCommaSeparated()
    {
        // Act
        var result = CodeGenerationHelper.GenerateParameterList(
            ("string", "name"),
            ("int", "age"),
            ("bool", "isActive"));

        // Assert
        Assert.Equal("string name, int age, bool isActive", result);
    }

    [Fact]
    public void GenerateArgumentList_WithNoArguments_ReturnsEmpty()
    {
        // Act
        var result = CodeGenerationHelper.GenerateArgumentList();

        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void GenerateArgumentList_WithMultipleArguments_ReturnsCommaSeparated()
    {
        // Act
        var result = CodeGenerationHelper.GenerateArgumentList("arg1", "arg2", "arg3");

        // Assert
        Assert.Equal("arg1, arg2, arg3", result);
    }

    [Fact]
    public void GenerateTypeParameterList_WithNoParameters_ReturnsEmpty()
    {
        // Act
        var result = CodeGenerationHelper.GenerateTypeParameterList();

        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void GenerateTypeParameterList_WithParameters_ReturnsCorrectFormat()
    {
        // Act
        var result = CodeGenerationHelper.GenerateTypeParameterList("T", "TResult");

        // Assert
        Assert.Equal("<T, TResult>", result);
    }

    [Fact]
    public void GenerateProperty_AsAutoProperty_GeneratesCorrectSyntax()
    {
        // Act
        var result = CodeGenerationHelper.GenerateProperty("public", "string", "Name");

        // Assert
        Assert.Contains("public string Name { get; set; }", result);
    }

    [Fact]
    public void GenerateAttribute_WithNoArguments_GeneratesSimpleAttribute()
    {
        // Act
        var result = CodeGenerationHelper.GenerateAttribute("Obsolete");

        // Assert
        Assert.Equal("[Obsolete]", result);
    }

    [Fact]
    public void GenerateAttribute_WithArguments_GeneratesAttributeWithArgs()
    {
        // Act
        var result = CodeGenerationHelper.GenerateAttribute("Obsolete", "\"Use new method\"", "true");

        // Assert
        Assert.Equal("[Obsolete(\"Use new method\", true)]", result);
    }

    [Fact]
    public void GenerateAttribute_WithAttributeSuffix_RemovesSuffix()
    {
        // Act
        var result = CodeGenerationHelper.GenerateAttribute("ObsoleteAttribute");

        // Assert
        Assert.Equal("[Obsolete]", result);
    }

    [Fact]
    public void EscapeString_WithNormalString_EscapesCorrectly()
    {
        // Act
        var result = CodeGenerationHelper.EscapeString("Hello World");

        // Assert
        Assert.Equal("\"Hello World\"", result);
    }

    [Fact]
    public void EscapeString_WithQuotes_EscapesQuotes()
    {
        // Act
        var result = CodeGenerationHelper.EscapeString("Say \"Hello\"");

        // Assert
        Assert.Equal("\"Say \\\"Hello\\\"\"", result);
    }

    [Fact]
    public void EscapeString_WithBackslashes_EscapesBackslashes()
    {
        // Act
        var result = CodeGenerationHelper.EscapeString("C:\\Path\\File");

        // Assert
        Assert.Equal("\"C:\\\\Path\\\\File\"", result);
    }

    [Fact]
    public void EscapeString_WithNull_ReturnsNull()
    {
        // Act
        var result = CodeGenerationHelper.EscapeString(null!);

        // Assert
        Assert.Equal("null", result);
    }

    [Fact]
    public void GenerateNullConditional_WithSingleMember_ReturnsCorrectChain()
    {
        // Act
        var result = CodeGenerationHelper.GenerateNullConditional("obj", "Property");

        // Assert
        Assert.Equal("obj?.Property", result);
    }

    [Fact]
    public void GenerateNullConditional_WithMultipleMembers_ReturnsCorrectChain()
    {
        // Act
        var result = CodeGenerationHelper.GenerateNullConditional("obj", "Property", "SubProperty", "Value");

        // Assert
        Assert.Equal("obj?.Property?.SubProperty?.Value", result);
    }

    [Fact]
    public void GenerateSwitchCase_GeneratesCorrectFormat()
    {
        // Act
        var result = CodeGenerationHelper.GenerateSwitchCase("\"value\"", "result");

        // Assert
        Assert.Equal("\"value\" => result", result);
    }

    [Fact]
    public void GenerateSwitchExpression_GeneratesCompleteSwitch()
    {
        // Arrange
        var cases = new[]
        {
            ("1", "\"one\""),
            ("2", "\"two\"")
        };

        // Act
        var result = CodeGenerationHelper.GenerateSwitchExpression("value", cases, "\"unknown\"");

        // Assert
        Assert.Contains("value switch", result);
        Assert.Contains("1 => \"one\"", result);
        Assert.Contains("2 => \"two\"", result);
        Assert.Contains("_ => \"unknown\"", result);
    }

    [Fact]
    public void GenerateAttribute_WithNullName_ThrowsArgumentNullException()
    {
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => 
            CodeGenerationHelper.GenerateAttribute(null!));
    }

    [Fact]
    public void GenerateSwitchCase_WithNullPattern_ThrowsArgumentNullException()
    {
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => 
            CodeGenerationHelper.GenerateSwitchCase(null!, "result"));
    }

    [Fact]
    public void GenerateNullConditional_WithNoMembers_ThrowsArgumentException()
    {
        // Act & Assert
        Assert.Throws<ArgumentException>(() => 
            CodeGenerationHelper.GenerateNullConditional());
    }
}
