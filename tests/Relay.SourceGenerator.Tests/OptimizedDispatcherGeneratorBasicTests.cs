using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System.Collections.Generic;
using System.Linq;
using Relay.SourceGenerator;
using Xunit;

namespace Relay.SourceGenerator.Tests;

public class OptimizedDispatcherGeneratorBasicTests
{
    private RelayCompilationContext CreateTestContext()
    {
        var code = @"
namespace Test
{
    public class TestRequest : Relay.Core.IRequest<string> { }
    public class TestHandler
    {
        [Relay.Core.Attributes.Handle]
        public async System.Threading.Tasks.ValueTask<string> HandleAsync(TestRequest request, System.Threading.CancellationToken cancellationToken)
        {
            return ""test"";
        }
    }
}";

        var compilation = CreateCompilation(code);
        return new RelayCompilationContext(compilation, System.Threading.CancellationToken.None);
    }

    private Compilation CreateCompilation(string source)
    {
        var syntaxTree = CSharpSyntaxTree.ParseText(source);
        var references = AppDomain.CurrentDomain.GetAssemblies()
            .Where(a => !a.IsDynamic && !string.IsNullOrWhiteSpace(a.Location))
            .Select(a => MetadataReference.CreateFromFile(a.Location))
            .ToList();

        return CSharpCompilation.Create(
            "TestAssembly",
            new[] { syntaxTree },
            references,
            new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
    }

    private HandlerInfo CreateMockHandler(string requestType, string responseType, string handlerType = "TestHandler", string methodName = "HandleAsync", bool isStatic = false, string? handlerName = null, int priority = 0)
    {
        var compilation = CreateCompilation($@"
namespace Test {{
    public class {requestType} : Relay.Core.IRequest<{responseType}> {{ }}
    public class {handlerType} {{
        {(isStatic ? "public static" : "public")} async System.Threading.Tasks.ValueTask<{responseType}> {methodName}({requestType} request, System.Threading.CancellationToken cancellationToken) => default;
    }}
}}");

        var semanticModel = compilation.GetSemanticModel(compilation.SyntaxTrees.First());
        var requestTypeSymbol = semanticModel.Compilation.GetTypeByMetadataName($"Test.{requestType}");
        var responseTypeSymbol = semanticModel.Compilation.GetTypeByMetadataName($"Test.{responseType}");
        var handlerTypeSymbol = semanticModel.Compilation.GetTypeByMetadataName($"Test.{handlerType}");

        var methodSymbol = handlerTypeSymbol?.GetMembers(methodName).OfType<IMethodSymbol>().FirstOrDefault();

        var handler = new HandlerInfo
        {
            MethodSymbol = methodSymbol,
            HandlerTypeSymbol = handlerTypeSymbol,
            RequestTypeSymbol = requestTypeSymbol,
            ResponseTypeSymbol = responseTypeSymbol,
            Attributes = new List<RelayAttributeInfo>
            {
                new RelayAttributeInfo
                {
                    Type = RelayAttributeType.Handle,
                    AttributeData = CreateMockAttributeData(handlerName, priority)
                }
            }
        };

        return handler;
    }

    private AttributeData CreateMockAttributeData(string? handlerName, int priority)
    {
        // For testing purposes, we'll create a mock attribute data
        // In a real scenario, this would be created from actual syntax
        return null!;
    }

    [Fact]
    public void Constructor_ShouldThrowOnNullContext()
    {
        // Act & Assert
        var exception = Assert.Throws<ArgumentNullException>(() => new OptimizedDispatcherGenerator(null!));
        Assert.Equal("context", exception.ParamName);
    }

    [Fact]
    public void Constructor_ShouldInitializeWithContext()
    {
        // Arrange
        var context = CreateTestContext();

        // Act
        var generator = new OptimizedDispatcherGenerator(context);

        // Assert
        Assert.NotNull(generator);
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldGenerateHeaderComments()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);

        // Assert
        Assert.Contains("// <auto-generated />", source);
        Assert.Contains("// Generated by Relay.SourceGenerator - Optimized Dispatcher", source);
        Assert.Contains("// Generation time:", source);
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldIncludeRequiredUsings()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);

        // Assert
        Assert.Contains("using System;", source);
        Assert.Contains("using System.Collections.Generic;", source);
        Assert.Contains("using System.Runtime.CompilerServices;", source);
        Assert.Contains("using System.Threading;", source);
        Assert.Contains("using System.Threading.Tasks;", source);
        Assert.Contains("using Microsoft.Extensions.DependencyInjection;", source);
        Assert.Contains("using Relay.Core;", source);
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldGenerateOptimizedDispatcherClass()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);

        // Assert
        Assert.Contains("namespace Relay.Generated", source);
        Assert.Contains("public static class OptimizedDispatcher", source);
        Assert.Contains("High-performance dispatcher with specialized methods for each request type", source);
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldIncludeMethodImplAttribute()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);

        // Assert
        Assert.Contains("[MethodImpl(MethodImplOptions.AggressiveInlining)]", source);
    }

    [Fact]
    public void GenerateOptimizedDispatcher_WithEmptyHandlers_ShouldGenerateValidCode()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);

        // Assert
        Assert.False(string.IsNullOrWhiteSpace(source));
        Assert.Contains("public static class OptimizedDispatcher", source);
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldGenerateBasicStructure()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);
        var syntaxTree = CSharpSyntaxTree.ParseText(source);

        // Assert - With empty handlers, the generated code structure should still be syntactically correct
        // (though it may not compile due to missing references)
        Assert.NotNull(syntaxTree);
        Assert.Contains("public static class OptimizedDispatcher", source);
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldIncludeNamespace()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);

        // Assert
        Assert.Contains("namespace Relay.Generated", source);
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldHaveProperIndentation()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);

        // Assert
        Assert.Contains("    public static class OptimizedDispatcher", source);
        Assert.DoesNotContain("\t", source); // Should use spaces, not tabs
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldIncludeXmlDocumentation()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);

        // Assert
        Assert.Contains("/// <summary>", source);
        Assert.Contains("/// </summary>", source);
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldGenerateUTCTimestamp()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();
        var beforeGeneration = DateTime.UtcNow;

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);

        // Assert
        Assert.Matches(@"// Generation time: \d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} UTC", source);
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldHandleMultipleGenerationCalls()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source1 = generator.GenerateOptimizedDispatcher(discoveryResult);
        var source2 = generator.GenerateOptimizedDispatcher(discoveryResult);

        // Assert - Both should be valid (timestamps may differ)
        Assert.False(string.IsNullOrWhiteSpace(source1));
        Assert.False(string.IsNullOrWhiteSpace(source2));
        Assert.Contains("public static class OptimizedDispatcher", source1);
        Assert.Contains("public static class OptimizedDispatcher", source2);
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldUseStaticClass()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);

        // Assert
        Assert.Contains("public static class OptimizedDispatcher", source);
        Assert.DoesNotContain("public class OptimizedDispatcher", source); // Not non-static
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldIncludePerformanceOptimizationComments()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);

        // Assert
        Assert.Contains("High-performance dispatcher", source);
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldCloseAllBraces()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);

        // Assert
        var openBraces = source.Count(c => c == '{');
        var closeBraces = source.Count(c => c == '}');
        Assert.Equal(closeBraces, openBraces);
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldUseValueTask()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);

        // Assert
        // ValueTask is more efficient than Task for hot paths
        Assert.Contains("ValueTask", source);
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldGenerateWithConsistentFormatting()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);
        var lines = source.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);

        // Assert
        Assert.DoesNotContain("\r\n\r\n\r\n", source); // No triple newlines
        Assert.NotNull(lines);
    }

    [Fact]
    public void GenerateOptimizedDispatcher_ShouldGenerateCleanCode()
    {
        // Arrange
        var context = CreateTestContext();
        var generator = new OptimizedDispatcherGenerator(context);
        var discoveryResult = new HandlerDiscoveryResult();

        // Act
        var source = generator.GenerateOptimizedDispatcher(discoveryResult);

        // Assert - Check for clean code generation without checking compilation
        Assert.DoesNotContain("TODO", source);
        Assert.DoesNotContain("HACK", source);
        Assert.Contains("public static class OptimizedDispatcher", source);
    }
}